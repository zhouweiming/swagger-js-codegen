{{#imports}}
/// <reference path="{{&.}}" />
{{/imports}}

import { request } from "{{&requestHelper}}";
const Parameter = require('router-parameter');
const paramter = new Parameter ();

export interface IResponseData < T = any> {
    code: number
    message: string
    current_stamp: number
    data : T
}

{{#definitions}}
type {{&name}} = {{#tsType}}{{> type}}{{/tsType}};
{{/definitions}}

{{! type Logger = { log: (line: string) => any }; }}

async function requestProxy<T>(method: string, url: string, body: any, headers: any, queryParameters: any, form: any, parameterConfig: any) {
    const paramValidateResult = paramter.param_validate(parameterConfig, Object.assign({}, queryParameters, body));
    if (paramValidateResult.errors) {
        const result = {
            code: 400,
            message: paramValidateResult.errors,
            current_stamp: Date.now(),
        }
        return result as IResponseData
    }
    return await request<T>(method, url, body, headers, queryParameters, form, parameterConfig);
}

/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default {
{{#methods}}
    {{> method}}
{{/methods}}
}
